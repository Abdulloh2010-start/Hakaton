"use client";
import { useState } from "react";
import "@/styles/Feedback.scss";

export default function FeedbackPage() {
  const [status, setStatus] = useState("");

  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    setStatus("loading");

    const form = e.currentTarget;
    const formData = new FormData(form);

    try {
      const res = await fetch("/api/feedback", {
        method: "POST",
        body: formData,
      });

      if (!res.ok) throw new Error("–û—à–∏–±–∫–∞ —Å–µ—Ç–∏");

      setStatus("success");
      form.reset();
    } catch (err) {
      setStatus("error");
      console.log(err)
    }
  };

  return (
    <div className="feedback-page">
      <h1>–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å</h1>
      <p>–ù–∞—à—ë–ª –±–∞–≥? –ï—Å—Ç—å –∏–¥–µ—è? –ù–∞–ø–∏—à–∏ –Ω–∞–º üëá</p>
      <form onSubmit={handleSubmit}>
        <input type="hidden" name="_captcha" value="false" />
        <input type="hidden" name="_template" value="table" />
        <input type="hidden" name="_subject" value="–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å Hakaton üöÄ" />
        <input type="hidden" name="_redirect" value="https://hakaton.vercel.app/feedback?success=true" />
        <input type="hidden" name="_replyto" value="{email}" />

        <label>
          –ò–º—è
          <input type="text" name="name" required />
        </label>
        <label>
          Email
          <input type="email" name="email" required />
        </label>
        <label>
          –ö–∞—Ç–µ–≥–æ—Ä–∏—è
          <select name="category" required>
            <option value="bug">üêû –ë–∞–≥</option>
            <option value="idea">üí° –ò–¥–µ—è</option>
            <option value="question">‚ùì –í–æ–ø—Ä–æ—Å</option>
          </select>
        </label>
        <label>
          –°–æ–æ–±—â–µ–Ω–∏–µ
          <textarea name="message" rows={5} required></textarea>
        </label>
        <button type="submit" disabled={status === "loading"}>
          {status === "loading" ? "–û—Ç–ø—Ä–∞–≤–ª—è–µ–º..." : "–û—Ç–ø—Ä–∞–≤–∏—Ç—å"}
        </button>
      </form>

      {status === "success" && <p className="success">‚úÖ –°–ø–∞—Å–∏–±–æ! –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.</p>}
      {status === "error" && <p className="error">‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.</p>}
    </div>
  );
};